{
  "version": 3,
  "sources": ["src/config.ts", "src/roam.ts", "src/anki.ts", "src/main.ts"],
  "sourcesContent": ["export * as config from './config';\n\n// Configure sync using these constants\n// A block tagged with CLOZE_TAG is synced.\nexport const CLOZE_TAG = 'srs/cloze';\n// The Anki deck to be synced to\nexport const ANKI_DECK_FOR_CLOZE_TAG = 'Max Infinity';\n// The Anki model (note type) that will be synced\nexport const ANKI_MODEL_FOR_CLOZE_TAG = 'ClozeRoam';\n\n// The note field that will contain the clozed text\nexport const ANKI_FIELD_FOR_CLOZE_TEXT = 'Text';\n// The note field that will store the UID (used by the code to associate the Anki note with the Roam block)\nexport const ANKI_FIELD_FOR_CLOZE_TAG = 'Metadata';\n\n// Advanced\n// A block tagged with GROUPED_CLOZE_TAG is not synced, but its children, if they have clozes, are.\nexport const GROUPED_CLOZE_TAG = 'srs/cloze-g';\n// The block tagged with GROUPED_CLOZE_TAG will be synced to this field.\nexport const ANKI_FIELD_FOR_GROUP_HEADER = 'Extra';\n\nexport const TITLE_CLOZE_TAG = 'srs/cloze-t';\nexport const ANKI_FIELD_FOR_TITLE = 'Title';\n\n// --- internals below this ---\nexport const METADATA_SCHEMA_VERSION = 2;\nexport const ANKI_CONNECT_VERSION = 6;\nexport const ANKI_CONNECT_FINDNOTES = 'findNotes';\nexport const ANKI_CONNECT_NOTESINFO = 'notesInfo';\nexport const ANKI_CONNECT_ADDNOTES = 'addNotes';\nexport const ANKI_CONNECT_UPDATENOTES = 'updateNoteFields';\n\nexport const NO_NID = -1;\n", "import {config} from './config';\nimport {AugmentedBlock, Block, BlockWithParent} from './types';\n\nexport const pullBlocksWithTag = async (tag: string): Promise<Block[]> => {\n  const c = window.roamAlphaAPI.q(\n    '[\\\n                        :find (pull ?referencingBlock [*]) \\\n                        :in $ ?pagetitle\\\n                        :where \\\n                            [?referencingBlock :block/refs ?referencedPage]\\\n                            [?referencedPage :node/title ?pagetitle]\\\n                        ]',\n    tag\n  );\n\n  return c.map((b: [Block, any]) => b[0]);\n};\n\n// TODO: Very similar to above code.\nexport const pullBlocksUnderTag = async (\n  groupTag: string,\n  titleTag: string\n): Promise<BlockWithParent[]> => {\n  // Returns array of [childBlock, parentBlockWithTag]\n  // Looks for both direct and indirect children.\n  const c: [Block, BlockWithParent][] = await window.roamAlphaAPI.q(\n    '[\\\n                        :find (pull ?childBlock [*]) (pull ?parentBlock [*]) \\\n                        :in $ ?pagetitle\\\n                        :where \\\n                            [?parentBlock :block/refs ?referencedPage]\\\n                            [?childBlock :block/parents ?parentBlock]\\\n                            [?referencedPage :node/title ?pagetitle]\\\n                        ]',\n    groupTag\n  );\n  const c2: [Block, BlockWithParent, BlockWithParent][] =\n    await window.roamAlphaAPI.q(\n      '[\\\n                        :find (pull ?childBlock [*]) (pull ?parentBlock [*]) (pull ?parentBlock2 [*]) \\\n                        :in $ ?pagetitle ?pagetitle2\\\n                        :where \\\n                            [?parentBlock :block/refs ?referencedPage]\\\n                            [?parentBlock2 :block/refs ?referencedPage2]\\\n                            [?childBlock :block/parents ?parentBlock]\\\n                             [?childBlock :block/parents ?parentBlock2]\\\n                            [?referencedPage :node/title ?pagetitle]\\\n                            [?referencedPage2 :node/title ?pagetitle2]\\\n                        ]',\n      groupTag,\n      titleTag\n    );\n  // Augment child with info from its *closest* parent.\n  const childBlocks: Map<string, BlockWithParent> = new Map();\n  for (const index in c) {\n    const block = <BlockWithParent>c[index][0];\n    const parent = c[index][1];\n    block['parentBlock'] = parent;\n    if (childBlocks.has(block.uid)) {\n      //console.log(`${block.uid} already has parent`);\n      const existingParents = childBlocks\n        .get(block.uid)!\n        .parentBlock.parents.map(x => x.id);\n      if (existingParents.includes(parent.id)) {\n        /*\n        console.log(\n          `new parent ${parent.id} is higher up than the current parent ${existingParents} in map, discard it.`\n        );\n        */\n        continue;\n      }\n      /*\n      console.log(\n        `new parent ${parent.id} is lower up than the current parent ${existingParents} in map, keep it.`\n      );\n      */\n    }\n    childBlocks.set(block.uid, block);\n  }\n  // Now populate for blocks which have a title.\n  for (const index in c2) {\n    const block = <BlockWithParent>c2[index][0];\n    const parent = c2[index][1];\n    const parent2 = c2[index][2];\n    block['parentBlock'] = parent;\n    block['titleBlock'] = parent2;\n    if (childBlocks.has(block.uid)) {\n      //console.log(`${block.uid} already has parent`);\n      const existingParents = childBlocks\n        .get(block.uid)!\n        .parentBlock.parents.map(x => x.id);\n      // For group tag, pick nearest parent\n      if (existingParents.includes(parent.id)) {\n        continue;\n      }\n    }\n    childBlocks.set(block.uid, block);\n  }\n  return Array.from(childBlocks.values());\n};\n\nconst ROAM_CLOZE_PATTERN = /{c(\\d+):([^}:]*)}/g;\nconst ROAM_CLOZE_WITH_HINT_PATTERN = /{c(\\d*):([^}:]*):hint:([^}]*)}/g;\n\nexport const convertToCloze = (s: string) => {\n  if (s.match(ROAM_CLOZE_PATTERN)) {\n    s = s.replace(ROAM_CLOZE_PATTERN, '{{c$1::$2}}');\n  } else if (s.match(ROAM_CLOZE_WITH_HINT_PATTERN)) {\n    s = s.replace(ROAM_CLOZE_WITH_HINT_PATTERN, '{{c$1::$2::$3}}');\n  }\n  s = basicMarkdownToHtml(s);\n  return s;\n};\n\nexport const noteMetadata = (block: AugmentedBlock) => {\n  return JSON.stringify({\n    block_uid: block.uid,\n    block_time: block.time,\n    schema_version: config.METADATA_SCHEMA_VERSION,\n    roam_page: block.page.id,\n  });\n};\n\nconst basicMarkdownToHtml = (s: string) => {\n  s = s.replace(/\\*\\*(.*?)\\*\\*/g, '<b>$1</b>');\n  s = s.replace(/__(.*?)__/g, '<i>$1</i>');\n  s = s.replace(/\\n/g, '<br>');\n\n  return s;\n};\n\n// Given an input or the current page, returns map of attributes.\nexport const getAttrUnderBlock = (blockUid: string) => {\n  return getAttrFromQuery(\n    `[:find (pull ?e [*]) :where [?e :block/title \"${blockUid}\"] ]`\n  );\n};\n\n// This function is handpicked from David Vargas' roam-client https://github.com/dvargas92495/roam-client\n// It is used to grab configuration from a Roam page.\nconst getAttrFromQuery = (query: string) => {\n  const pageResults = window.roamAlphaAPI.q(query);\n  if (pageResults.length === 0 || !pageResults[0][0].attrs) {\n    return {};\n  }\n\n  const configurationAttrRefs = pageResults[0][0].attrs.map(\n    a => a[2].source[1]\n  );\n  const entries = configurationAttrRefs.map(\n    r =>\n      window.roamAlphaAPI\n        .q(\n          `[:find (pull ?e [:block/string]) :where [?e :block/uid \"${r}\"] ]`\n        )[0][0]\n        .string?.split('::')\n        .map(toAttributeValue) || [r, 'undefined']\n  );\n  // eslint-disable-next-line node/no-unsupported-features/es-builtins\n  return Object.fromEntries(entries);\n};\n\nconst toAttributeValue = (s: string) =>\n  (s.trim().startsWith('{{or: ')\n    ? s.substring('{{or: '.length, s.indexOf('|'))\n    : s\n  ).trim();\n", "import {config} from './config';\nimport {AugmentedBlock, Block, BlockWithNote, NewNote} from './types';\nimport {convertToCloze, noteMetadata} from './roam';\n\nfunction retry(fn: () => Promise<any>, n: number) {\n  let promise: Promise<any> = Promise.reject();\n  for (let i = 0; i < n; i++) {\n    promise = promise.catch(() => fn());\n  }\n  promise.catch(() => {\n    throw new Error(`Failed retrying ${n} times`);\n  });\n  return promise;\n}\n\n// Returns anki notes with the given note IDs.\n/*\n example output:\n [{ \"noteId\": 1603364308368,\n    \"tags\": [],\n    \"fields\": {\n        \"Text\": { \"value\": \"observations1234: <i>when1</i> a bsslock is {{c1::modified}} in [roam](((-_bUL8eUa))) #srs/cloze\", \"order\": 0 },\n        \"TextUID\": { \"value\": \"f9huaS-67\", \"order\": 1 },\n        \"Back Extra\": { \"value\": \"\", \"order\": 2 } },\n    \"modelName\": \"ClozeRoam\",\n    \"cards\": [1603364308368] }, ...]\n */\nexport const batchFindNotes = async (blocksWithNids: [Block, number][]) => {\n  const nids = blocksWithNids.map(b => b[1]);\n  const ankiNote = await invokeAnkiConnect(\n    config.ANKI_CONNECT_NOTESINFO,\n    config.ANKI_CONNECT_VERSION,\n    {notes: nids}\n  );\n  return ankiNote;\n};\n\nexport const batchAddNotes = async (blocks: Block[]): Promise<any> => {\n  const newNotes = blocks.map(b => blockToAnkiSyntax(b));\n  return invokeAnkiConnect(\n    config.ANKI_CONNECT_ADDNOTES,\n    config.ANKI_CONNECT_VERSION,\n    {\n      notes: newNotes,\n    }\n  );\n};\n\nexport const updateNote = async (\n  blockWithNote: BlockWithNote\n): Promise<any> => {\n  const newNote = blockToAnkiSyntax(blockWithNote.block);\n  newNote.id = blockWithNote.note.noteId;\n  delete newNote.deckName;\n  delete newNote.modelName;\n  return invokeAnkiConnect(\n    config.ANKI_CONNECT_UPDATENOTES,\n    config.ANKI_CONNECT_VERSION,\n    {note: newNote}\n  );\n};\n\nexport const invokeAnkiConnect = (\n  action: string,\n  version: number,\n  params = {}\n): Promise<any> => {\n  return new Promise((resolve, reject) => {\n    const xhr = new XMLHttpRequest();\n    xhr.addEventListener('error', () =>\n      reject(Error('failed to issue request'))\n    );\n    xhr.addEventListener('load', () => {\n      try {\n        const response = JSON.parse(xhr.responseText);\n        if (Object.getOwnPropertyNames(response).length !== 2) {\n          throw Error('response has an unexpected number of fields');\n        }\n        if (!Object.prototype.hasOwnProperty.call(response, 'error')) {\n          throw Error('response is missing required error field');\n        }\n        if (!Object.prototype.hasOwnProperty.call(response, 'result')) {\n          throw Error('response is missing required result field');\n        }\n        if (response.error) {\n          throw response.error;\n        }\n        resolve(response.result);\n      } catch (e) {\n        reject(e);\n      }\n    });\n\n    xhr.open('POST', 'http://localhost:8765');\n    // console.log(JSON.stringify({ action, version, params }));\n    xhr.send(JSON.stringify({action, version, params}));\n  });\n};\n\nconst blockToAnkiSyntax = (block: AugmentedBlock): NewNote => {\n  const fieldsObj: any = {};\n  // TODO: extract tags in a certain format. use namespaces.\n  fieldsObj[config.ANKI_FIELD_FOR_CLOZE_TEXT] = convertToCloze(block.string);\n  fieldsObj[config.ANKI_FIELD_FOR_CLOZE_TAG] = noteMetadata(block);\n  // TODO This means parent is only updated if child is updated.\n  if ('parentBlock' in block) {\n    fieldsObj[config.ANKI_FIELD_FOR_GROUP_HEADER] = block.parentBlock.string\n      .replace('#' + config.GROUPED_CLOZE_TAG, '')\n      .replace('#' + '[[' + config.GROUPED_CLOZE_TAG + ']]', '')\n      .replace('#' + config.TITLE_CLOZE_TAG, '')\n      .replace('#' + '[[' + config.TITLE_CLOZE_TAG + ']]', '');\n  }\n  if ('titleBlock' in block) {\n    fieldsObj[config.ANKI_FIELD_FOR_TITLE] = block.titleBlock.string\n      .replace('#' + config.GROUPED_CLOZE_TAG, '')\n      .replace('#' + '[[' + config.GROUPED_CLOZE_TAG + ']]', '')\n      .replace('#' + config.TITLE_CLOZE_TAG, '')\n      .replace('#' + '[[' + config.TITLE_CLOZE_TAG + ']]', '');\n  }\n  // If parent block is equal to the title block, populate just the title block.\n  // This enables use-cases where both tags appear on the same block.\n  if (\n    'parentBlock' in block &&\n    'titleBlock' in block &&\n    block.parentBlock.string === block.titleBlock.string\n  ) {\n    console.log('redacting one field');\n    fieldsObj[config.ANKI_FIELD_FOR_GROUP_HEADER] = '';\n  }\n  return {\n    deckName: config.ANKI_DECK_FOR_CLOZE_TAG,\n    modelName: config.ANKI_MODEL_FOR_CLOZE_TAG,\n    fields: fieldsObj,\n  };\n};\n", "/* eslint-disable max-len */\n/* eslint-disable no-multi-str */\n\nimport {AugmentedBlock, Block, BlockWithNote} from './types';\nimport {\n  batchFindNotes,\n  updateNote,\n  batchAddNotes,\n  invokeAnkiConnect,\n} from './anki';\nimport {config} from './config';\nimport {\n  convertToCloze,\n  pullBlocksUnderTag,\n  pullBlocksWithTag,\n  getAttrUnderBlock,\n} from './roam';\n\nasync function retry(fn: () => Promise<any>, n: number) {\n  for (let i = 0; i < n; i++) {\n    try {\n      return await fn();\n    } catch {}\n  }\n\n  throw new Error(`Failed retrying ${n} times`);\n}\n\n// Core sync logic\nconst syncNow = async () => {\n  // STEP 1: Get all blocks that reference srs/cloze\n  // Useful attributes in these blocks: uid, string, time (unix epoch)\n  const singleBlocks: AugmentedBlock[] = await retry(\n    () => pullBlocksWithTag(config.CLOZE_TAG),\n    3\n  );\n  // groupBlocks are augmented with information from their parent.\n  const groupBlocks = await retry(\n    () => pullBlocksUnderTag(config.GROUPED_CLOZE_TAG, config.TITLE_CLOZE_TAG),\n    3\n  );\n  const groupClozeBlocks: AugmentedBlock[] =\n    groupBlocks.filter(blockContainsCloze);\n  const blocks: AugmentedBlock[] = singleBlocks.concat(groupClozeBlocks);\n  // console.log(JSON.stringify(singleBlocks, null, 2));\n  // console.log(JSON.stringify(groupClozeBlocks, null, 2));\n  const blockWithNid: [Block, number][] = await retry(\n    () => Promise.all(blocks.map(b => processSingleBlock(b))),\n    3\n  );\n  const blocksWithNids = blockWithNid.filter(\n    ([_, nid]) => nid !== config.NO_NID\n  );\n  const blocksWithNoNids = blockWithNid\n    .filter(([_, nid]) => nid === config.NO_NID)\n    .map(b => b[0]);\n  const existingNotes = await retry(() => batchFindNotes(blocksWithNids), 3);\n\n  // STEP 2: For blocks that exist in both Anki and Roam, generate `blockWithNote`.\n  // The schema for `blockWithNote` is shown in `NOTES.md`.\n  const blockWithNote: BlockWithNote[] = blocksWithNids.map((block, i) => {\n    const _existingNote = existingNotes[i];\n    const noteMetadata = JSON.parse(\n      _existingNote['fields'][config.ANKI_FIELD_FOR_CLOZE_TAG]['value']\n    );\n    _existingNote.block_time = noteMetadata['block_time'];\n    _existingNote.block_uid = noteMetadata['block_uid'];\n    return {nid: block[1], block: block[0], note: _existingNote};\n  });\n\n  // Toggle this on for debugging only\n  // console.log(\"blocks with no nids\" + JSON.stringify(blocksWithNoNids));\n  // console.log(\"blockWithNote array: \" + JSON.stringify(blockWithNote, null, 2));\n\n  // STEP 3: Compute diffs between Anki and Roam\n  const newerInRoam = blockWithNote.filter(\n    x => x.block.time > x.note.block_time\n  );\n  const newerInAnki = blockWithNote.filter(\n    x =>\n      x.block.time <= x.note.block_time &&\n      // TODO(better diff algorithm here)\n      convertToCloze(x.block.string) !==\n        x.note['fields'][config.ANKI_FIELD_FOR_CLOZE_TEXT]['value']\n  );\n  console.log('[syncNow] total synced blocks ' + blocks.length);\n  console.log('[syncNow] newer in roam ' + newerInRoam.length);\n  console.log('[syncNow] newer in anki ' + newerInAnki.length);\n\n  // STEP 4: Update Anki's outdated notes\n  const updateExistingInAnki = await retry(\n    () => Promise.all(newerInRoam.map(x => updateNote(x))),\n    3\n  );\n  console.log(updateExistingInAnki); // should be an array of nulls if there are no errors\n\n  // STEP 5: Update Roam's outdated blocks\n  const updateExistingInRoam = await retry(\n    () => Promise.all(newerInAnki.map(x => updateBlock(x))),\n    3\n  );\n  console.log(updateExistingInRoam); // should be an array of nulls if there are no errors\n\n  // STEP 6: Create new cards in Anki\n  const results = await retry(() => batchAddNotes(blocksWithNoNids), 3);\n  console.log(results); // should be an array of nulls if there are no errors\n  console.log(\n    '[syncNow]' + JSON.stringify(getAttrUnderBlock('fabricius/config'))\n  );\n};\n\n// UI logic\nconst renderFabriciusButton = () => {\n  const syncAnkiButton = document.createElement('span');\n  syncAnkiButton.id = 'sync-anki-button-span';\n  syncAnkiButton.classList.add('bp3-popover-wrapper');\n  syncAnkiButton.setAttribute('style', 'margin-left: 4px;');\n  const outerSpan = document.createElement('span');\n  outerSpan.classList.add('bp3-popover-target');\n  syncAnkiButton.appendChild(outerSpan);\n  const icon = document.createElement('span');\n  icon.id = 'sync-anki-icon';\n  icon.setAttribute('status', 'off');\n  icon.classList.add(\n    'bp3-icon-intersection',\n    'bp3-button',\n    'bp3-minimal',\n    'bp3-small'\n  );\n  outerSpan.appendChild(icon);\n  /** workaround needed because roam/js can load before the topbar */\n  function renderInTopbar() {\n    if (!document.getElementsByClassName('rm-topbar')) {\n      window.requestAnimationFrame(renderInTopbar);\n    } else {\n      document\n        .getElementsByClassName('rm-topbar')[0]\n        .appendChild(syncAnkiButton);\n    }\n  }\n  renderInTopbar();\n  icon.onclick = syncNow;\n};\n\nconst removeFabriciusButton = () => {\n  const syncAnkiButton = document.getElementById('sync-anki-button-span');\n  syncAnkiButton?.remove();\n};\n\nif (document.getElementById('sync-anki-button-span') !== null) {\n  document.getElementById('sync-anki-button-span')!.remove();\n}\nconsole.log('adding anki sync!');\ntry {\n  renderFabriciusButton();\n} catch (e) {\n  window.requestAnimationFrame(renderFabriciusButton);\n}\n\n// For Roam Depot\nexport default {\n  onload: () => {\n    try {\n      renderFabriciusButton();\n    } catch (e) {\n      window.requestAnimationFrame(renderFabriciusButton);\n    }\n  },\n  onunload: () => {\n    removeFabriciusButton();\n  },\n};\n\n// Helpers\n\n// updateBlock mutates `blockWithNote`.\nconst updateBlock = async (blockWithNote: BlockWithNote): Promise<any> => {\n  const noteText =\n    blockWithNote.note.fields[config.ANKI_FIELD_FOR_CLOZE_TEXT]['value'];\n  const blockText = convertToRoamBlock(noteText);\n  // success? - boolean\n  const updateRes = window.roamAlphaAPI.updateBlock({\n    block: {\n      uid: blockWithNote.block.uid,\n      string: blockText,\n    },\n  });\n  if (!updateRes) {\n    console.log('[updateBlock] failed to update');\n    return;\n  }\n  // The block will have a newer modified time than the Anki note. But we don't know what value it is. We query for it after waiting, and update the note in Anki.\n  await new Promise(r => setTimeout(r, 200));\n  const updateTime = window.roamAlphaAPI.q(\n    `[ :find (pull ?e [ :edit/time ]) :where [?e :block/uid \"${blockWithNote.block.uid}\"]]`\n  )[0][0].time;\n  // console.log(updateTime);\n  blockWithNote.block.time = updateTime;\n  blockWithNote.block.string = blockText;\n  return updateNote(blockWithNote);\n};\n\nexport const processSingleBlock = async (\n  block: Block\n): Promise<[Block, number]> => {\n  // console.log('searching for block ' + block.uid);\n  // TODO: should do a more exact structural match on the block uid here, but a collision *seems* unlikely.\n  const nid: number[] = await invokeAnkiConnect(\n    config.ANKI_CONNECT_FINDNOTES,\n    config.ANKI_CONNECT_VERSION,\n    {\n      query: `${config.ANKI_FIELD_FOR_CLOZE_TAG}:re:${block.uid} AND note:${config.ANKI_MODEL_FOR_CLOZE_TAG}`,\n    }\n  );\n  if (nid.length === 0) {\n    // create card in Anki\n    return [block, config.NO_NID];\n  }\n  // TODO(can be improved)\n  // assume that only 1 note matches\n  return [block, nid[0]];\n};\n\nconst blockContainsCloze = (block: AugmentedBlock) => {\n  const found = block.string.match(/{c(\\d+):([^}]*)}/g);\n  return found !== null && found.length !== 0;\n};\n\nconst ANKI_CLOZE_PATTERN = /{{c(\\d+)::([^}:]*)}}/g;\nconst ANKI_CLOZE_WITH_HINT_PATTERN = /{{c(\\d+)::([^}:]*)::([^}]*)}}/g;\n\n// String manipulation functions\nconst convertToRoamBlock = (s: string) => {\n  if (s.match(ANKI_CLOZE_PATTERN)) {\n    s = s.replace(ANKI_CLOZE_PATTERN, '{c$1:$2}');\n  } else if (s.match(ANKI_CLOZE_WITH_HINT_PATTERN)) {\n    s = s.replace(ANKI_CLOZE_WITH_HINT_PATTERN, '{c$1:$2:hint:$3}');\n  }\n  s = basicHtmlToMarkdown(s);\n  return s;\n};\n\nconst basicHtmlToMarkdown = (s: string) => {\n  s = s.replace('<b>', '**');\n  s = s.replace('</b>', '**');\n  s = s.replace('<i>', '__');\n  s = s.replace('</i>', '__');\n  s = s.replace('&nbsp;', ' ');\n  s = s.replace('<br>', '\\n');\n  return s;\n};\n"],
  "mappings": "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",
  "names": []
}
